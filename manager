#! /usr/bin/python
# importing required modules
import argparse
import cv2
import datetime
import hashlib
import os
import random
import sqlite3
import threading
import time
from getpass import getpass
from string import *

# starting time of script
start = time.time()

# code to clear terminal
os.system("clear")

# printing name of author
print(""" __  __                                
|  \/  |_   _ _ __  ___  ___  ___ _ __ 
| |\/| | | | | '_ \/ __|/ _ \/ _ \ '__|
| |  | | |_| | | | \__ \  __/  __/ |   
|_|  |_|\__,_|_| |_|___/\___|\___|_|  """)

# printing date and time
x = datetime.datetime.now().strftime("%H:%M:%S %b %d %Y")
print(x)

# replacing ":" with "-"
j = str(datetime.datetime.now())
j.replace(":", "-")

# adding command line arguments
parser = argparse.ArgumentParser()
parser.add_argument("-new", help="Enter Keyword to unlock database inserting", type=str)
parser.add_argument("-a", help="Enter the name of the application", type=str)
parser.add_argument("-u", help="Enter the username of the application", type=str)
parser.add_argument("-e", help="Enter Email/phone of the application", type=str)
parser.add_argument("-p", help="Enter the password of application", type=str)

args = parser.parse_args()


# function to generate passwords with random characters
def gen():
    sym = ';/#$%&^*(){}[]|'
    mix = sym + ascii_uppercase + ascii_lowercase + digits
    length = 20
    r = random.sample(mix, length)
    password = "".join(r)
    print(f"Your password is ready: {password}")


# function to take photo using module opencv-python
def capture():
    cam = cv2.VideoCapture(0)
    result, img = cam.read()
    time.sleep(2)
    path = "/home/munseer/code/python/Log"
    cv2.imwrite(os.path.join(path, f"{j}.jpg"), img)
    cam.release()
    cv2.destroyAllWindows()


# function to encode input to md5 hash
def hash(word):
    # assigning variable
    enc = hashlib.md5(word.encode()).hexdigest()
    # returning hashed value
    return enc


class Main:
    # code block to insert credentials to database
    def insert(self, app, user, email, password):
        # adding exception handling
        try:
            # code to insert
            cur = self.pass_con.cursor()
            # insert query
            insertQuery = f"""INSERT INTO PASSWORDS VALUES (?, ?, ?, ?)"""
            cur.execute(insertQuery, (app.capitalize(), user, email, password))
            # committing the changes to database
            self.pass_con.commit()
            # closing the database
            self.pass_con.close()
            # I don't know how to back up a database, so I am using default linux command to copy database to backups folder with .bak extension
            os.system("cp /home/munseer/code/database/pass.db /home/munseer/code/database/backups/pass.bak")
        # exception code
        except Exception as e:
            print("Oops Something Went Wrong")

    # __init__ function
    def __init__(self):
        super().__init__()
        # path to database directory
        path = "/home/munseer/code/database"
        # connecting to required database using sqlite3.connect() function
        self.pass_con = sqlite3.connect(f"{path}/pass.db")
        key_con = sqlite3.connect(f"{path}/key.db")
        self.log_con = sqlite3.connect(f"{path}/log.db")
        # fetching access key from database
        cur = key_con.cursor()
        cur.execute("SELECT * FROM KEY")
        keys = cur.fetchall()
        for key in keys:
            self.key = "".join(key)

        # using if else to determine which function to call
        if args.new in ("insert", "new"):
            self.insert(str(args.a).capitalize(), args.u, args.e, args.p)
        else:
            self.security()

    # function to fetch credentials from database according to the given input
    def creds(self, app):
        # creating list for storing passwords
        # list for application
        apps = []
        # list for usernames
        usernames = []
        # list for emails
        emails = []
        # list for passwords
        passwords = []
        # exception handling
        try:
            cur = self.pass_con.cursor()
            # executing SQL command
            cur.execute(f'SELECT * FROM PASSWORDS WHERE APPLICATION LIKE "%{app}%"')
            # fetching creds
            creds = cur.fetchall()
            # appending creds to list using for loop
            for cred in creds:
                apps.append(cred[0])
                usernames.append(cred[1])
                emails.append(cred[2])
                passwords.append(cred[3])

            if app == "":
                print("Invalid Input")
            elif len(apps) == 0:
                print("Invalid Input")
            else:
                # iterating through multiple list at same time
                for (a, b, c, d) in zip(apps, usernames, emails, passwords):
                    # printing the credentials
                    print(f'\nApplication     : {a}')
                    print(f'Username        : {b}')
                    print(f'Email/phone     : {c}')
                    print(f'Password        : {d}')
        # output invalid input for any sqlite3.error
        except sqlite3.Error as e:
            print(e)

    # main function in class
    def main(self):
        # capturing image using the capture function demonizing it using thread.daemon
        thread = threading.Thread(target=capture)
        # setting thread.daemon to true
        thread.daemon = True
        # starting thread
        thread.start()
        # input to get the name of the application
        app = str(input("\nEnter The Name Of The Application: ")).strip().lower()
        # logging input to logs.log using write() function
        # opening log file
        with open("/home/munseer/code/python/Log/logs.log", "a") as f:
            # writing log
            f.write(
                f"\nTime: {x} Script: {__file__} Application: {app.capitalize()}")
            # closing file
            f.close()
        # calling function to fetch creds from database
        self.creds(app)
        # asking if you want new password or not
        pas = str(input("\nDo you need a new password(y/n): ")).strip().lower()
        # if input is "y" or "yes"
        if pas in ('y', "yes"):
            # calling function to generate password and printing it to screen
            gen()
        # else 
        else:
            # do nothing
            pass

        # adding log to database for log
        cur = self.log_con.cursor()
        # SQL Query to insert value to database
        insertQuery = f"""INSERT INTO LOG VALUES (?, ?, ?)"""
        # inserting log to database
        cur.execute(insertQuery, (app.capitalize(), x, __file__))
        # committing changes
        self.log_con.commit()
        # closing log database
        self.log_con.close()

    # function for security
    def security(self):
        # asking input for password
        inp = str(getpass("\nEnter Password To Unlock File: ")).strip().lower()
        # hashing input using hash function
        encoder = hash(inp)
        # setting limit
        i = 0
        # while loop
        while encoder != self.key:
            # printing access denied
            print("Access Denied!")
            # incrementing value
            i += 1
            # if i is equal or grater than 3
            if i >= 3:
                # break the loop
                break
            # else
            else:
                # try again code
                inp = getpass("\nTry Again: ").strip().lower()
                # hashing input
                encoder = hash(inp)
        # if password is correct
        else:
            # printing access granted
            print("Access Granted!")
            # call main function
            self.main()


# calling class Main
if __name__ == "__main__":
    Main()

# getting time
end = time.time()

# printing execution time
print(f"Execution Time: {end - start}")
# don't do anything for 3 seconds
time.sleep(3)
# clear terminal screen
os.system("clear")
# ending of script
